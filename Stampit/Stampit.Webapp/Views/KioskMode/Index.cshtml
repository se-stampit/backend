@using Stampit.Webapp.Models;
@using Stampit.CommonType;
@model IEnumerable<ProductViewModel>

@{
    ViewBag.Title = "Stampit Kiosk";
}
@if (string.IsNullOrEmpty(Session[Setting.SESSION_COMPANY]?.ToString()))
{
	<br />
	<h1>No Company selected</h1>
}
else
{
	<div class="jumbotron row">
		<h1 class="col-xs-6">STAMPIT KIOSK</h1>
		<div class="col-xs-6">
			<button type="button" class="btn btn-lg btn-primary btn-default btn-use-stamp" onclick="location.href='@Url.Action("RedeemStampCard", "KioskMode")'">Stempelkarte einlösen</button>
		</div>
	</div>

	<div class="flexcontainer">
		<div class="flexcol">
			<div class="products">
				<div class="panel panel-primary">
					<div class="panel-heading">
						<h3 class="panel-title">Produkte</h3>
					</div>
					<div class="panel-body">
						@if (Model != null)
						{
							foreach (var productEntry in Model)
							{
								<div class="row">
									<button type="button" class="btn btn-lg btn-primary @GetProductButtonClass(productEntry) btn-product" onclick="location.href='@Url.Action("SelectProductViewModel", "KioskMode", new { selectedProduct = productEntry.Product.Productname })'">
										<div class="row product-detail-container">
											<span class="text-left col-xs-9 product-detail-name">@productEntry.Product.Productname</span>
											@if (productEntry.Count != 0)
											{
												<span class="text-right col-xs-2 bubble">@productEntry.Count</span>
	                                        }
										</div>
									</button>
								</div>
							}
						}
						else
						{
							<div class="row" />
						}
					</div>
				</div>
			</div>
		</div>
		<div class="flexcol">
			<div class="flexcontainer">
				<div class="row">
					<div class="calcbtn">
						<button type="button" class="btn btn-xlg btn-primary btn-success" onclick="location.href='@Url.Action("SetCount", "KioskMode", new { count = 1 })'">1</button>
					</div>
					<div class="calcbtn">
						<button type="button" class="btn btn-xlg btn-primary btn-success" onclick="location.href='@Url.Action("SetCount", "KioskMode", new { count = 4 })'">4</button>
					</div>
					<div class="calcbtn">
						<button type="button" class="btn btn-xlg btn-primary btn-success" onclick="location.href='@Url.Action("SetCount", "KioskMode", new { count = 7 })'">7</button>
					</div>
				</div>
				<div class="row">
					<div class="calcbtn">
						<button type="button" class="btn btn-xlg btn-primary btn-success" onclick="location.href='@Url.Action("SetCount", "KioskMode", new { count = 2 })'">2</button>
					</div>
					<div class="calcbtn">
						<button type="button" class="btn btn-xlg btn-primary btn-success" onclick="location.href='@Url.Action("SetCount", "KioskMode", new { count = 5 })'">5</button>
					</div>
					<div class="calcbtn">
						<button type="button" class="btn btn-xlg btn-primary btn-success" onclick="location.href='@Url.Action("SetCount", "KioskMode", new { count = 8 })'">8</button>
					</div>
				</div>
				<div class="row">
					<div class="calcbtn">
						<button type="button" class="btn btn-xlg btn-primary btn-success" onclick="location.href='@Url.Action("SetCount", "KioskMode", new { count = 3 })'">3</button>
					</div>
					<div class="calcbtn">
						<button type="button" class="btn btn-xlg btn-primary btn-success" onclick="location.href='@Url.Action("SetCount", "KioskMode", new { count = 6 })'">6</button>
					</div>
					<div class="calcbtn">
						<button type="button" class="btn btn-xlg btn-primary btn-cancel" onclick="location.href='@Url.Action("SetCount", "KioskMode", new { count = 0 })'">C</button>
					</div>
				</div>
			</div>
		</div>
		<div class="flexcol"><button type="button" class="btn btn-lg btn-primary btn-default btn-cash-stamp" onclick="location.href='@Url.Action("ShowStampGenerationQrCode", "KioskMode")'">Stempel erzeugen</button></div>
	</div>

	@functions {

		string GetProductButtonClass(ProductViewModel productEntry)
		{
			return (productEntry?.IsSelected ?? false) ? "btn-selected" : "btn-danger";
		}
	}
}