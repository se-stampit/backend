@using Newtonsoft.Json;
@using Stampit.Entity;
@model IEnumerable<Store>
<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>

<!-- This css is to ensure that the google map contols (zoom bar etc) show and size correctly. -->
<style>
    #map_canvas img {
        max-height: none;
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: unset;
        width: unset;
        -webkit-user-select: none;
        background-color: white;
    }
</style>
<!-- This is the div that will contain the Google Map -->
<div id="map_canvas" style="height: 300px;"></div>

<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
<script type="text/javascript">

    $(document).ready(function () {
        Initialize();
    });

    // Where all the fun happens
    function Initialize() {

        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;

        var modeldata = @Html.Raw(JsonConvert.SerializeObject(Model, new JsonSerializerSettings
                   {
                       ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                       MaxDepth = 2
                   }));

        var Center = new google.maps.LatLng(48.303487, 14.288781);

        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 14,
            center: Center,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        // This makes the div with id "map_canvas" a google map
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins

        $.each(modeldata, function (i, item) {
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.Latitude.toString(),item.Longitude.toString()),
                'map': map,
                'title': item.Address
            });

            // Make the marker-pin blue!
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png')

            contentString = "<div class='infoDiv'>" + "<h3>"+item.StoreName+"</h3>" + "<h4>"+item.Address+"</h4>"+ "<h6>"+item.Description+"</h6></div>"
            content = "<div class='info'><iframe frameborder='0' src='Profile/MapsView/"+item.Id+"'></iframe></div>"
            // put in some information about each json object - in this case, the opening hours.
            var infowindow = new google.maps.InfoWindow();
            infowindow.setContent(contentString);

            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });
            //set center to the last element
            Center = new google.maps.LatLng(item.Latitude.toString(),item.Longitude.toString());
        })

        map.setCenter(Center);

        // This event listener will call addMarker() when the map is clicked.
        map.addListener('click', function(event) {
            var marker = new google.maps.Marker({
                'position': event.latLng,
                'map': map,
                'title': 'Click to create a new store here',
                draggable:true
            });

            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

            google.maps.event.addListener(marker, 'click', function () {
                window.location.href = '/Stores/Create?lat='+event.latLng.lat()+"&lng="+event.latLng.lng();
            });

        });
    }
</script>